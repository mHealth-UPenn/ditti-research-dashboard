# Copyright 2025 The Trustees of the University of Pennsylvania
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may]
# not use this file except in compliance with the License. You may obtain a
# copy of the License at http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.

"""Sleep Data

Revision ID: b9459a8bda83
Revises: f267b6182686
Create Date: 2024-11-14 15:38:58.096598

"""
import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'b9459a8bda83'
down_revision = 'f267b6182686'
branch_labels = None
depends_on = 'f267b6182686'


def upgrade():
    # ### commands auto generated by Alembic, then manually edited ###

    # 1. Create 'sleep_log' Table
    op.create_table('sleep_log',
                    sa.Column('id', sa.Integer(), nullable=False),
                    sa.Column('study_subject_id',
                              sa.Integer(), nullable=False),
                    sa.Column('log_id', sa.BigInteger(), nullable=False),
                    sa.Column('date_of_sleep', sa.Date(), nullable=False),
                    sa.Column('duration', sa.Integer(), nullable=True),
                    sa.Column('efficiency', sa.Integer(), nullable=True),
                    sa.Column('end_time', sa.DateTime(), nullable=True),
                    sa.Column('info_code', sa.Integer(), nullable=True),
                    sa.Column('is_main_sleep', sa.Boolean(), nullable=True),
                    sa.Column('minutes_after_wakeup',
                              sa.Integer(), nullable=True),
                    sa.Column('minutes_asleep', sa.Integer(), nullable=True),
                    sa.Column('minutes_awake', sa.Integer(), nullable=True),
                    sa.Column('minutes_to_fall_asleep',
                              sa.Integer(), nullable=True),
                    sa.Column('log_type', sa.Enum('auto_detected', 'manual',
                                                  name='sleeplogtypeenum'), nullable=False),
                    sa.Column('start_time', sa.DateTime(), nullable=True),
                    sa.Column('time_in_bed', sa.Integer(), nullable=True),
                    sa.Column('type', sa.Enum('stages', 'classic',
                                              name='sleepcategorytypeenum'), nullable=False),
                    sa.ForeignKeyConstraint(['study_subject_id'], [
                                            'study_subject.id'], ),
                    sa.PrimaryKeyConstraint('id')
                    )
    with op.batch_alter_table('sleep_log', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_sleep_log_date_of_sleep'), [
                              'date_of_sleep'], unique=False)
        batch_op.create_index(batch_op.f('ix_sleep_log_log_id'), [
                              'log_id'], unique=True)
        batch_op.create_index(batch_op.f('ix_sleep_log_study_subject_id'), [
                              'study_subject_id'], unique=False)

    # 2. Create 'sleep_level' Table
    op.create_table('sleep_level',
                    sa.Column('id', sa.Integer(), nullable=False),
                    sa.Column('sleep_log_id', sa.Integer(), nullable=False),
                    sa.Column('date_time', sa.DateTime(), nullable=False),
                    sa.Column('level', sa.Enum('wake', 'light', 'deep', 'rem', 'asleep',
                                               'awake', 'restless', name='sleeplevelenum'), nullable=False),
                    sa.Column('seconds', sa.Integer(), nullable=False),
                    sa.Column('is_short', sa.Boolean(), nullable=True),
                    sa.ForeignKeyConstraint(
                        ['sleep_log_id'], ['sleep_log.id'], ),
                    sa.PrimaryKeyConstraint('id')
                    )
    with op.batch_alter_table('sleep_level', schema=None) as batch_op:
        batch_op.create_index('idx_sleep_level_sleep_log_id_date_time', [
                              'sleep_log_id', 'date_time'], unique=False)
        batch_op.create_index(batch_op.f('ix_sleep_level_date_time'), [
                              'date_time'], unique=False)

    # 3. Create 'sleep_summary' Table
    op.create_table('sleep_summary',
                    sa.Column('id', sa.Integer(), nullable=False),
                    sa.Column('sleep_log_id', sa.Integer(), nullable=False),
                    sa.Column('level', sa.Enum('wake', 'light', 'deep', 'rem', 'asleep',
                                               'awake', 'restless', name='sleeplevelenum'), nullable=False),
                    sa.Column('count', sa.Integer(), nullable=True),
                    sa.Column('minutes', sa.Integer(), nullable=True),
                    sa.Column('thirty_day_avg_minutes',
                              sa.Integer(), nullable=True),
                    sa.ForeignKeyConstraint(
                        ['sleep_log_id'], ['sleep_log.id'], ),
                    sa.PrimaryKeyConstraint('id')
                    )

    # 4. Modify 'study' Table
    with op.batch_alter_table('study', schema=None) as batch_op:
        # Make 'default_expiry_delta' non-nullable
        batch_op.alter_column('default_expiry_delta',
                              existing_type=sa.INTEGER())
        # Add 'data_summary' and 'is_qi' columns
        batch_op.add_column(
            sa.Column('data_summary', sa.Text(), nullable=True))
        batch_op.add_column(sa.Column('is_qi', sa.Boolean()))

    # 5. Update existing 'default_expiry_delta' to 30 days for existing records
    op.execute(
        "UPDATE study SET default_expiry_delta = 30 WHERE default_expiry_delta IS NULL"
    )
    op.execute(
        "UPDATE study SET is_qi = false WHERE is_qi IS NULL"
    )

    with op.batch_alter_table("study", schema=None) as batch_op:
        batch_op.alter_column(
            "is_qi",
            existing_type=sa.BOOLEAN(),
            nullable=False,
        )
        batch_op.alter_column(
            "default_expiry_delta",
            existing_type=sa.INTEGER(),
            nullable=False,
        )

    # 6. Modify 'join_study_subject_api' Table
    with op.batch_alter_table('join_study_subject_api', schema=None) as batch_op:
        # Add 'last_sync_date' column
        batch_op.add_column(
            sa.Column('last_sync_date', sa.Date(), nullable=True))
        # Add 'created_on' column
        batch_op.add_column(sa.Column('created_on', sa.DateTime(
        ), server_default=sa.func.now(), nullable=False))
        # Drop unique constraints on 'access_key_uuid' and 'refresh_key_uuid'
        batch_op.drop_constraint(
            'join_study_subject_api_access_key_uuid_key', type_='unique')
        batch_op.drop_constraint(
            'join_study_subject_api_refresh_key_uuid_key', type_='unique')
        # Drop 'access_key_uuid' and 'refresh_key_uuid' columns
        batch_op.drop_column('access_key_uuid')
        batch_op.drop_column('refresh_key_uuid')

    # 7. Modify 'join_study_subject_study' Table
    with op.batch_alter_table('join_study_subject_study', schema=None) as batch_op:
        # Add 'created_on' column
        batch_op.add_column(sa.Column('created_on', sa.DateTime(
        ), nullable=False, server_default=sa.func.now()))
        # Alter 'expires_on' to be nullable
        batch_op.alter_column('expires_on',
                              existing_type=postgresql.TIMESTAMP(),
                              nullable=True)

    # 8. Modify 'study_subject' Table
    with op.batch_alter_table('study_subject', schema=None) as batch_op:
        # Add 'ditti_id' column
        batch_op.add_column(sa.Column('ditti_id', sa.String(), nullable=True))
        # Drop unique constraint on 'email'
        batch_op.drop_constraint('study_subject_email_key', type_='unique')

    # Copy data from 'email' to 'ditti_id'
    op.execute(
        """
        UPDATE study_subject
        SET ditti_id = email
        """
    )

    with op.batch_alter_table("study_subject", schema=None) as batch_op:
        batch_op.alter_column(
            "ditti_id",
            existing_type=sa.String(),
            nullable=False,
        )
        # Create unique constraint on 'ditti_id' with an explicit name
        batch_op.create_unique_constraint(
            'study_subject_ditti_id_key', ['ditti_id'])
        batch_op.drop_column('is_confirmed') # Now drop is_confirmed
        batch_op.drop_column('email')

    # 9. Add 'sleep_logs' Relationship
    # Note: Relationships are handled in ORM models and do not require migration scripts.

    # 10. Modify 'blocked_token' Table
    with op.batch_alter_table('blocked_token', schema=None) as batch_op:
        # Alter 'created_on' column to set server_default to current timestamp
        batch_op.alter_column('created_on',
                              existing_type=sa.DateTime(),
                              server_default=sa.func.now(),
                              existing_nullable=False)

    # 11. Add 'set_expires_on' Function
    # Note: Event listeners are part of the application code and are not included in migration scripts.

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###

    # 1. Drop 'set_expires_on' Function
    # Note: Event listeners are part of the application code and are not included in migration scripts.

    # 2. Modify 'blocked_token' Table
    with op.batch_alter_table('blocked_token', schema=None) as batch_op:
        # Remove the server_default from 'created_on'
        batch_op.alter_column('created_on',
                              existing_type=sa.DateTime(),
                              server_default=None,
                              existing_nullable=False)

    # 3. Remove 'sleep_logs' Relationship
    # Note: Relationships are handled in ORM models and do not require migration scripts.

    # 4. Modify 'study_subject' Table
    with op.batch_alter_table('study_subject', schema=None) as batch_op:
        # Add 'email' and 'is_confirmed' columns as nullable first
        batch_op.add_column(sa.Column('email', sa.VARCHAR(),
                                      autoincrement=False, nullable=True))
        batch_op.add_column(
            sa.Column('is_confirmed', sa.BOOLEAN(), autoincrement=False, nullable=True))

    # Copy data from 'ditti_id' to 'email' and set default for 'is_confirmed'
    op.execute(
        """
        UPDATE study_subject
        SET email = ditti_id,
            is_confirmed = FALSE
        """
    )

    with op.batch_alter_table('study_subject', schema=None) as batch_op:
        # Now make 'email' and 'is_confirmed' NOT NULL
        batch_op.alter_column('email',
                              existing_type=sa.VARCHAR(),
                              nullable=False)
        batch_op.alter_column('is_confirmed',
                              existing_type=sa.BOOLEAN(),
                              nullable=False)

        # Drop unique constraint on 'ditti_id'
        batch_op.drop_constraint('study_subject_ditti_id_key', type_='unique')
        # Recreate unique constraint on 'email'
        batch_op.create_unique_constraint('study_subject_email_key', ['email'])
        # Drop 'ditti_id' column
        batch_op.drop_column('ditti_id')

    # 5. Modify 'join_study_subject_study' Table
    with op.batch_alter_table('join_study_subject_study', schema=None) as batch_op:
        # Alter 'expires_on' to be non-nullable
        batch_op.alter_column('expires_on',
                              existing_type=postgresql.TIMESTAMP(),
                              nullable=False)
        # Drop 'created_on' column
        batch_op.drop_column('created_on')

    # 6. Modify 'join_study_subject_api' Table
    with op.batch_alter_table('join_study_subject_api', schema=None) as batch_op:
        # Drop 'last_sync_date' and 'created_on' columns
        batch_op.drop_column('created_on')
        batch_op.drop_column('last_sync_date')
        # Add 'access_key_uuid' and 'refresh_key_uuid' columns
        batch_op.add_column(sa.Column('refresh_key_uuid',
                            sa.VARCHAR(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('access_key_uuid',
                            sa.VARCHAR(), autoincrement=False, nullable=True))
        # Recreate unique constraints on 'access_key_uuid' and 'refresh_key_uuid'
        batch_op.create_unique_constraint(
            'join_study_subject_api_refresh_key_uuid_key', ['refresh_key_uuid'])
        batch_op.create_unique_constraint(
            'join_study_subject_api_access_key_uuid_key', ['access_key_uuid'])

    # 7. Modify 'study' Table
    with op.batch_alter_table('study', schema=None) as batch_op:
        # Alter 'default_expiry_delta' to be nullable
        batch_op.alter_column('default_expiry_delta',
                              existing_type=sa.INTEGER(),
                              nullable=True)
        # Drop 'data_summary' and 'is_qi' columns
        batch_op.drop_column('is_qi')
        batch_op.drop_column('data_summary')

    # 8. Drop 'sleep_summary' Table
    op.drop_table('sleep_summary')

    # 9. Drop Indexes from 'sleep_level' Table
    with op.batch_alter_table('sleep_level', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_sleep_level_date_time'))
        batch_op.drop_index('idx_sleep_level_sleep_log_id_date_time')

    # 10. Drop 'sleep_level' Table
    op.drop_table('sleep_level')

    # 11. Drop Indexes from 'sleep_log' Table
    with op.batch_alter_table('sleep_log', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_sleep_log_study_subject_id'))
        batch_op.drop_index(batch_op.f('ix_sleep_log_log_id'))
        batch_op.drop_index(batch_op.f('ix_sleep_log_date_of_sleep'))

    # 12. Drop 'sleep_log' Table
    op.drop_table('sleep_log')

    # 13. Drop Enum Types
    sleeplevelenum = postgresql.ENUM(
        'wake', 'light', 'deep', 'rem', 'asleep', 'awake', 'restless',
        name='sleeplevelenum'
    )
    sleeplogtypeenum = postgresql.ENUM(
        'auto_detected', 'manual',
        name='sleeplogtypeenum'
    )
    sleepcategorytypeenum = postgresql.ENUM(
        'stages', 'classic',
        name='sleepcategorytypeenum'
    )
    sleeplevelenum.drop(op.get_bind(), checkfirst=True)
    sleeplogtypeenum.drop(op.get_bind(), checkfirst=True)
    sleepcategorytypeenum.drop(op.get_bind(), checkfirst=True)

    # ### end Alembic commands ###