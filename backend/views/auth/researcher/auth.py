# Copyright 2025 The Trustees of the University of Pennsylvania
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may]
# not use this file except in compliance with the License. You may obtain a
# copy of the License at http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.

import logging

from flask import Blueprint, jsonify, request

from backend.auth.controllers import ResearcherAuthController
from backend.auth.decorators import researcher_auth_required
from backend.auth.utils import create_error_response

blueprint = Blueprint("researcher_auth", __name__, url_prefix="/auth/researcher")
logger = logging.getLogger(__name__)

# Create auth controller instance
auth_controller = ResearcherAuthController()


@blueprint.route("/login")
def login():
    """
    Redirect researchers to the Cognito login page.

    This endpoint:
    1. Generates a secure nonce for ID token validation
    2. Generates a secure state parameter for CSRF protection
    3. Generates PKCE code_verifier and code_challenge
        for authorization code security
    4. Redirects to the Cognito authorization endpoint
        with all security parameters

    Returns
    -------
        Redirect to Cognito login page
    """
    return auth_controller.login()


@blueprint.route("/callback")
def cognito_callback():
    """
    Handle Cognito's authorization callback for researchers.

    This endpoint:
    1. Validates the state parameter to prevent CSRF attacks
    2. Provides the code_verifier for PKCE validation
    3. Exchanges the authorization code for tokens
    4. Validates the ID token with the stored nonce
    5. Retrieves the researcher in the database
    6. Sets secure cookies with the tokens
    7. Redirects to the frontend application

    Returns
    -------
        Redirect to frontend with tokens set in cookies, or
        400 Bad Request on authentication errors
        403 Forbidden if account is archived
    """
    return auth_controller.callback()


@blueprint.route("/logout")
def logout():
    """
    Log out the researcher from the application and Cognito.

    This endpoint:
    1. Clears the session data
    2. Builds a logout URL for Cognito
    3. Clears authentication cookies
    4. Redirects to Cognito logout

    Returns
    -------
        Redirect to Cognito logout URL with cookies cleared
    """
    return auth_controller.logout()


@blueprint.route("/check-login", methods=["GET"])
def check_login():
    """
    Verify active login status and return the researcher's info.

    This endpoint:
    1. Checks if the ID token exists in cookies
    2. Validates the token and extracts the account
    3. Returns the account info on success

    Returns
    -------
        200 OK with account info on success
        401 Unauthorized if not authenticated or token invalid
            or account not found
        403 Forbidden if account is archived
    """
    return auth_controller.check_login()


@blueprint.route("/change-password", methods=["POST"])
@researcher_auth_required
def change_password():
    """
    Change a researcher's password.

    The endpoint uses the researcher_auth_required decorator which ensures
    proper authentication before the function is called.

    Request Body:
        {
            "previousPassword": str,  # Required for changing password
            "newPassword": str        # Required for changing password
        }

    Returns
    -------
        Response: JSON response indicating success or error
    """
    # Get request data
    data = request.get_json()
    if not data:
        return create_error_response(
            "Invalid request data",
            status_code=400,
            error_code="INVALID_REQUEST",
        )

    # Extract password fields
    previous_password = data.get("previousPassword")
    new_password = data.get("newPassword")

    # Get access token from cookie
    access_token = request.cookies.get("access_token")

    # Use the controller to change the password
    success, response = auth_controller.change_password(
        previous_password, new_password, access_token
    )

    # Return the response generated by the controller
    return response


@blueprint.route("/get-access")
@researcher_auth_required
def get_access(account):
    """
    Check if user has permissions for an action/resource for a given app/study.

    Query Parameters:
        app (str): The app ID (1, 2, or 3)
        study (str): The study ID
        action (str): The action to check permissions for
        resource (str): The resource to check permissions for

    Returns
    -------
        Response: JSON response indicating whether the request is authorized
            200 OK with message "Authorized" if permitted
            200 OK with message "Unauthorized" if not permitted
    """
    msg = "Authorized"
    app_id = request.args.get("app")
    study_id = request.args.get("study")
    action = request.args.get("action")
    resource = request.args.get("resource")
    permissions = account.get_permissions(app_id, study_id)

    try:
        account.validate_ask(action, resource, permissions)
    except ValueError:
        msg = "Unauthorized"

    return jsonify({"msg": msg})
